; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


[env]
framework = arduino
monitor_speed = 115200
build_flags = 
    -DEMC_MIN_FREE_MEMORY=2048
	-DEMC_ALLOW_NOT_CONNECTED_PUBLISH=0
	; -DEMC_ESP8266_MULTITHREADING=0
	; -D_TASK_STD_FUNCTION=1   // Compile with support for std::function.
    ; -D_TASK_THREAD_SAFE=0
    ; -DCONFIG_ASYNC_TCP_EVENT_QUEUE_SIZE=128
    ; -DCONFIG_ASYNC_TCP_QUEUE_SIZE=128
	-Wall -Wextra -Wunused -Wmisleading-indentation -Wduplicated-cond -Wlogical-op -Wnull-dereference
	; -DCONFIG_ASYNC_TCP_STACK_SIZE=256*15
    -std=c++17
    -std=gnu++17
build_unflags =
    -std=gnu++11
lib_ignore =
    AsyncTCP
	; ESPAsyncTCP-esphome
lib_deps = 
	;me-no-dev/ESP Async WebServer
	; esphome/AsyncTCP-esphome@2.0.0
	https://github.com/mathieucarbou/esphome-ESPAsyncTCP.git
	; mathieucarbou/Async TCP @ 3.1.2
	; esphome/ESPAsyncWebServer-esphome@^3.1.0
	; mathieucarbou/ESP Async WebServer @ 2.9.3
    ; https://github.com/yubox-node-org/ESPAsyncWebServer
	; mathieucarbou/Async TCP@^3.0.2
	;knolleary/PubSubClient@^2.8
	; marvinroger/AsyncMqttClient@^0.9.0
	mathieucarbou/ESP Async WebServer@^2.9.5
    bblanchon/ArduinoJson @ 7.0.4

	https://github.com/bertmelis/espMqttClient.git#v1.6.0
	alanswx/ESPAsyncWiFiManager
	
	paulstoffregen/OneWire
	milesburton/DallasTemperature
	https://github.com/antibill51/RBDDimmer.git
	; https://github.com/antibill51/RBDDimmer.git#0.0.1
	;ayushsharma82/AsyncElegantOTA @ ^2.2.7
	https://github.com/xlyric/AsyncElegantOTA
	https://github.com/YiannisBourkelis/Uptime-Library
	arkhipenko/TaskScheduler@^3.7.0 
	; arduino-libraries/NTPClient@^3.2.1
    paulstoffregen/Time
extra_scripts = 
    pre:pio-scripts/patch_apply.py
	post:prep_www_gzip.py
; custom_patches = 
	; async_tcp
	; async_web 

[env:StandAlone]
platform = espressif8266
board_build.filesystem = littlefs
board = d1_mini
upload_speed = 921600
build_flags = 
  ${env.build_flags}
	-D STANDALONE
	-D ROBOTDYN
	-D WINDOWS
	-D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED
	-D COMPILE_NAME=\"Alone\"

lib_deps =
  ${env.lib_deps}
    https://github.com/bluemurder/esp8266-ping



[env:StandAloneDEBUG]
platform = espressif8266
board_build.filesystem = littlefs
board = d1_mini
build_type = debug
monitor_filters = esp8266_exception_decoder, time, log2file, colorize
upload_speed = 921600
build_flags = 
  ${env.build_flags}
    -D Debug=1
	-D DEBUG_ESP_PORT=Serial
	-D DEBUG_ESP_MQTT_CLIENT=1
	-D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_VERBOSE
	; -D DEBUG_ESP_ASYNC_TCP=1
	; -D DEBUG_ESP_TCP_SSL=1
	; -DPIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48
	-D PIO_FRAMEWORK_ARDUINO_MMU_CACHE16_IRAM48_SECHEAP_SHARED
	-D STANDALONE
	-D ROBOTDYN
	-D WINDOWS
	-D COMPILE_NAME=\"Alone\"

lib_deps =
  ${env.lib_deps}
    https://github.com/bluemurder/esp8266-ping
; compatible avec la nouvelle carte avec synchro r√©seau et SSR Ramdom
;[env:SSR-JOTTASYNC]
;platform = espressif8266
;board_build.filesystem = littlefs
; board = d1_mini
;upload_speed = 921600
;build_flags = 
	;-D SSR
	;-D SSR_RANDOM
	;-D COMPILE_NAME=\"SSR-SYNC\"

; compatible avec les SSR ZC 
[env:SSR-Burst-Revisited]
platform = espressif8266
board_build.filesystem = littlefs
board = d1_mini
upload_speed = 921600
build_flags = 
  ${env.build_flags}
	-D SSR
	-D SSR_ZC
	-D COMPILE_NAME=\"SSR-ZC\"

;deprecated ESP8266 

[env:POWERSUPPLY2022]
platform = espressif8266
board_build.filesystem = littlefs
board = d1_mini
upload_speed = 115200
build_flags = 
  ${env.build_flags}
	-D POWERSUPPLY2022
	-D WINDOWS
	-D ROBOTDYN
	-D COMPILE_NAME=\"PowerSupply2022\"

[env:PowerSupplyACdimmer]
platform = espressif8266
board = d1_mini
upload_speed = 921600
build_flags = 
  ${env.build_flags}
	-D POWERSUPPLY
	-D ROBOTDYN
	-D WINDOWS
	-D COMPILE_NAME=\"PowerSupply2023\"

; ESP32
[env:esp32dev]
platform = espressif32 @~6.6.0 
board = az-delivery-devkit-v4
board_build.flash_mode = qio
build_flags = 
  ${env.build_flags}
	-D ESP32
	-D ROBOTDYN
	-D WINDOWS
	-D COMPILE_NAME=\"esp32dev\"
	; -DWM_DEBUG_PORT=Serial  
	; -DWM_DEBUG_LEVEL=5 
	; -DDEBUG_ESP_PORT=Serial 
	; -DCORE_DEBUG_LEVEL=5  
	; -DDEBUG_ESP_CORE 
	; -DDEBUG_ESP_WIFI 
	; -DDEBUG_ESP_HTTP_CLIENT 
	; -DDEBUG_ESP_HTTP_UPDATE 
	; -DDEBUG_ESP_HTTP_SERVER 
	; -DDEBUG_ESP_UPDATER 
	; -DDEBUG_ESP_OTA 
	; -DDEBUG_TLS_MEM
lib_deps =
  ${env.lib_deps}
    esphome/AsyncTCP-esphome@2.0.0


;[env:esp32eth]
;platform = espressif32 @~6.1.0 
;board = esp-wrover-kit
;board_build.filesystem = spiffs
;upload_speed = 115200
;build_flags = 
	;-D ESP32ETH
	;-D ROBOTDYN
	;-D WINDOWS
	;-D COMPILE_NAME=\"esp32eth\"
;lib_deps =
;  ${env.lib_deps}
;    esphome/AsyncTCP-esphome@^2.0.0

;[env:esp32_wemos]
;platform = espressif32 @~6.1.0 
;board = wemos_d1_mini32
;board_build.filesystem = spiffs
;upload_speed = 921600
;board_build.mcu = esp32
;board_build.f_cpu = 240000000L
;build_flags = 
	;-D ESP32
	;-D ROBOTDYN
	;-D WINDOWS
	;-D COMPILE_NAME=\"Wemos_esp32\"
;lib_deps =
;  ${env.lib_deps}
;    esphome/AsyncTCP-esphome@^2.0.0
